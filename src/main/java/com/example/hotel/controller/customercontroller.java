package com.example.hotel.controller;

import java.util.Optional;

import org.apache.tomcat.jni.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.hotel.entity.*;
import com.example.hotel.repo.*;

@Controller // This means that this class is a Controller
public class customercontroller {

@Autowired // This means to get the bean called userRepository
// Which is auto-generated by Spring, we will use it to handle the data
private customerRepository customerRepository;
@GetMapping("/demo2/h")
public String hello() {
	return "customermanage";
}
@GetMapping("/demo2/home")
public String homepage() {
	return "cusmember";
}
@GetMapping(path="/demo2/add") // Map ONLY POST Requests
public String addNewUser (@RequestParam int id,String name, String email,String country) {
	
	System.out.println("inside add" +id+ " " +name +" " +email+" "+country);
	
	customer obj = new customer();
	obj.setId(id);
	obj.setName(name);
	obj.setEmail(email);
	obj.setCountry(country);
	customerRepository.save(obj);
//userRepository.
//userRepository.
return "cushome";
}

@GetMapping(path = "/demo2/all")
public String getAllUsers() {
	return "cusfetch";

}



@GetMapping(path="/demo2/isExist")
public @ResponseBody boolean isExist() {
	
	// This returns a JSON or XML with the users
System.out.println("inside all");
return customerRepository.existsById(1);
}
@GetMapping(path = "/demo2/delete")
public String delPage() {
	return "cusdel";
}

@GetMapping(path = "/demo2/deleted")
public String delete(@RequestParam int id) {
	System.out.println("inside all");
	customerRepository.deleteById(id);
	return "cushome";
}

@GetMapping(path = "/demo2/updated")
public  String updated(@RequestParam int id, String name,  String email,
	String country) {

	
	customer obj = new customer();
	obj.setId(id);
	obj.setName(name);
	obj.setEmail(email);
	obj.setCountry(country);
	customerRepository.save(obj);
	return "cushome";
	}

@GetMapping(path = "/demo2/update")

public String uppage() {
	return "cusupdating";

}

}

